import streamlit as st
import pandas as pd
import os
import tempfile
from langchain_groq import ChatGroq
from langchain_community.agent_toolkits import create_sql_agent
from langchain_community.utilities import SQLDatabase
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def main():
    st.set_page_config(
        page_title="ü§ñ Agente de An√°lise de CSV",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("ü§ñ Agente de An√°lise de CSV com LangChain")
    st.markdown("""
    Esta aplica√ß√£o utiliza um agente de IA baseado em **LangChain** para analisar arquivos CSV.
    Fa√ßa upload de um arquivo CSV e fa√ßa perguntas sobre seus dados!
    """)

    # Verificar se a chave da API est√° configurada
    groq_api_key = os.getenv("GROQ_API_KEY")
    if not groq_api_key:
        st.error("‚ö†Ô∏è A chave da API da Groq n√£o foi configurada. Configure a vari√°vel de ambiente GROQ_API_KEY.")
        st.stop()

    # Sidebar para upload de arquivo
    with st.sidebar:
        st.header("üìÅ Upload de Arquivo")
        uploaded_file = st.file_uploader(
            "Escolha um arquivo CSV",
            type="csv",
            help="Fa√ßa upload de um arquivo CSV para an√°lise"
        )
        
        if uploaded_file is not None:
            try:
                # Salvar o arquivo CSV temporariamente
                with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as tmp_file:
                    tmp_file.write(uploaded_file.getvalue())
                    tmp_file_path = tmp_file.name
                
                # Carregar o CSV para um DataFrame (apenas para preview e info b√°sicas)
                # Carrega apenas algumas linhas para preview e informa√ß√µes b√°sicas para evitar estouro de mem√≥ria
                df_preview = pd.read_csv(tmp_file_path, nrows=5)
                
                # Para obter o n√∫mero total de linhas e colunas sem carregar tudo na mem√≥ria
                # Lendo o arquivo em chunks para contar linhas e colunas
                total_rows = 0
                total_cols = 0
                # Usar um iterador para evitar carregar o arquivo inteiro de uma vez
                csv_iterator = pd.read_csv(tmp_file_path, chunksize=1000, iterator=True)
                for i, chunk in enumerate(csv_iterator):
                    if i == 0:
                        total_cols = chunk.shape[1]
                    total_rows += chunk.shape[0]

                st.success(f"‚úÖ Arquivo carregado com sucesso!")
                st.info(f"üìä **Dimens√µes:** {total_rows} linhas √ó {total_cols} colunas")
                
                # Mostrar preview dos Dados
                st.subheader("üëÄ Preview dos Dados")
                st.dataframe(df_preview, use_container_width=True)
                
                # Informa√ß√µes b√°sicas sobre o dataset (usando as contagens de chunks)
                st.subheader("üìà Informa√ß√µes B√°sicas")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Linhas", total_rows)
                    st.metric("Colunas", total_cols)
                with col2:
                    # Para valores nulos e mem√≥ria, precisar√≠amos carregar o DF completo ou usar uma abordagem mais complexa.
                    # Por simplicidade e para evitar estouro de mem√≥ria, vamos omitir por enquanto ou usar uma estimativa.
                    st.metric("Valores Nulos (Estimativa)", "N/A") # N√£o √© poss√≠vel calcular sem carregar tudo
                    st.metric("Mem√≥ria (Estimativa)", "N/A") # N√£o √© poss√≠vel calcular sem carregar tudo
                
                # Criar um banco de dados SQLite em disco (tempor√°rio) a partir do CSV
                db_path = os.path.join(tempfile.gettempdir(), "temp_db.db")
                from sqlalchemy import create_engine
                engine = create_engine(f"sqlite:///{db_path}")
                
                # Carregar o CSV para o SQLite em chunks para evitar estouro de mem√≥ria
                chunksize = 1000  # Ajuste conforme necess√°rio
                csv_iterator_to_sql = pd.read_csv(tmp_file_path, chunksize=chunksize, iterator=True)
                for i, chunk in enumerate(csv_iterator_to_sql):
                    chunk.to_sql("csv_data", engine, if_exists="append", index=False)
                
                # Criar o objeto SQLDatabase da LangChain com o engine
                db = SQLDatabase(engine=engine)
                st.session_state.db = db
                st.session_state.file_uploaded = True
                st.session_state.tmp_file_path = tmp_file_path # Guardar para limpeza
                
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar o arquivo: {str(e)}")
                st.session_state.file_uploaded = False

    # √Årea principal da aplica√ß√£o
    if 'file_uploaded' in st.session_state and st.session_state.file_uploaded:
        
        # Inicializar hist√≥rico de conversa
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        # Mostrar hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Fa√ßa uma pergunta sobre os dados..."):
            # Adicionar mensagem do usu√°rio
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Gerar resposta do agente
            with st.chat_message("assistant"):
                with st.spinner("ü§î Analisando os dados..."):
                    try:
                        # Criar o agente LangChain SQL
                        llm = ChatGroq(temperature=0, groq_api_key=groq_api_key, model_name='llama-3.3-70b-versatile')
                        agent_executor = create_sql_agent(
                            llm=llm,
                            db=st.session_state.db,
                            agent_type="openai-tools",
                            verbose=False,
                            allow_dangerous_code=True,
                            agent_executor_kwargs={
                                "handle_parsing_errors": True
                            },
                            system_message="""
Voc√™ √© um agente de IA especializado em analisar dados de CSVs. Sua tarefa √© responder a perguntas sobre os dados da tabela \'csv_data\' em um banco de dados SQLite. 
Use as ferramentas dispon√≠veis para inspecionar o esquema da tabela, gerar e executar consultas SQL para extrair as informa√ß√µes necess√°rias. 
Seja conciso e direto nas suas respostas. Se uma pergunta n√£o puder ser respondida com os dados dispon√≠veis, diga que n√£o sabe.
"""
                        )

                        
                        # Executar a consulta
                        response = agent_executor.invoke({"input": prompt})
                        
                        # Exibir a resposta
                        st.markdown(response["output"])
                        
                        # Adicionar ao hist√≥rico
                        st.session_state.messages.append({
                            "role": "assistant", 
                            "content": response["output"]
                        })
                        
                    except Exception as e:
                        error_msg = f"‚ùå Ocorreu um erro: {str(e)}"
                        st.error(error_msg)
                        st.session_state.messages.append({
                            "role": "assistant", 
                            "content": error_msg
                        })
        
        # Se√ß√£o de exemplos de perguntas
        with st.expander("üí° Exemplos de Perguntas"):
            st.markdown("""
            **An√°lise Descritiva:**
            - Quais s√£o os tipos de dados de cada coluna?
            - Mostre as estat√≠sticas descritivas dos dados
            - Quantos valores √∫nicos existem em cada coluna?
            
            **An√°lise de Padr√µes:**
            - Existem outliers nos dados?
            - Qual √© a distribui√ß√£o da vari√°vel target?
            - Quais s√£o os padr√µes mais interessantes nos dados?
            """)
    
    else:
        # Tela inicial quando nenhum arquivo foi carregado
        st.info("üëÜ Fa√ßa upload de um arquivo CSV na barra lateral para come√ßar a an√°lise!")
        
        # Informa√ß√µes sobre a aplica√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("üß† Intelig√™ncia Artificial")
            st.write("Utiliza LangChain e Groq para an√°lise inteligente de dados")
        
        with col2:
            st.subheader("üìä An√°lise Completa")
            st.write("Estat√≠sticas descritivas, visualiza√ß√µes e detec√ß√£o de padr√µes")
        
        with col3:
            st.subheader("üí¨ Interface Conversacional")
            st.write("Fa√ßa perguntas em linguagem natural sobre seus dados")

if __name__ == "__main__":
    main()

