import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
from langchain_groq import ChatGroq
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def main():
    st.set_page_config(
        page_title="ü§ñ Agente de An√°lise de CSV",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("ü§ñ Agente de An√°lise de CSV com LangChain")
    st.markdown("""
    Esta aplica√ß√£o utiliza um agente de IA baseado em **LangChain** para analisar arquivos CSV.
    Fa√ßa upload de um arquivo CSV e fa√ßa perguntas sobre seus dados!
    """)

    # Verificar se a chave da API est√° configurada
    groq_api_key = os.getenv("GROQ_API_KEY")
    if not groq_api_key:
        st.error("‚ö†Ô∏è A chave da API da Groq n√£o foi configurada. Configure a vari√°vel de ambiente GROQ_API_KEY.")
        st.stop()

    # Sidebar para upload de arquivo
    with st.sidebar:
        st.header("üìÅ Upload de Arquivo")
        uploaded_file = st.file_uploader(
            "Escolha um arquivo CSV",
            type="csv",
            help="Fa√ßa upload de um arquivo CSV para an√°lise"
        )
        
        if uploaded_file is not None:
            try:
                # Carregar o DataFrame
                df = pd.read_csv(uploaded_file)
                st.success(f"‚úÖ Arquivo carregado com sucesso!")
                st.info(f"üìä **Dimens√µes:** {df.shape[0]} linhas √ó {df.shape[1]} colunas")
                
                # Mostrar preview dos dados
                st.subheader("üëÄ Preview dos Dados")
                st.dataframe(df.head(), use_container_width=True)
                
                # Informa√ß√µes b√°sicas sobre o dataset
                st.subheader("üìà Informa√ß√µes B√°sicas")
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Linhas", df.shape[0])
                    st.metric("Colunas", df.shape[1])
                with col2:
                    st.metric("Valores Nulos", df.isnull().sum().sum())
                    st.metric("Mem√≥ria (MB)", f"{df.memory_usage(deep=True).sum() / 1024**2:.2f}")
                
                # Armazenar o DataFrame no session state
                st.session_state.df = df
                st.session_state.file_uploaded = True
                
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar o arquivo: {str(e)}")
                st.session_state.file_uploaded = False

    # √Årea principal da aplica√ß√£o
    if 'file_uploaded' in st.session_state and st.session_state.file_uploaded:
        
        # Inicializar hist√≥rico de conversa
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        # Mostrar hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                if message["role"] == "assistant" and "plot" in message:
                    st.pyplot(message["plot"])
                else:
                    st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Fa√ßa uma pergunta sobre os dados..."):
            # Adicionar mensagem do usu√°rio
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Gerar resposta do agente
            with st.chat_message("assistant"):
                with st.spinner("ü§î Analisando os dados..."):
                    try:
                        # Criar o agente LangChain
                        llm = ChatGroq(temperature=0, groq_api_key=groq_api_key)
                        agent = create_pandas_dataframe_agent(
                            llm, 
                            st.session_state.df, 
                            verbose=False,
                            allow_dangerous_code=True
                        )
                        
                        # Executar a consulta
                        response = agent.run(prompt)
                        
                        # Exibir a resposta
                        st.markdown(response)
                        
                        # Adicionar ao hist√≥rico
                        st.session_state.messages.append({
                            "role": "assistant", 
                            "content": response
                        })
                        
                    except Exception as e:
                        error_msg = f"‚ùå Ocorreu um erro: {str(e)}"
                        st.error(error_msg)
                        st.session_state.messages.append({
                            "role": "assistant", 
                            "content": error_msg
                        })
        
        # Se√ß√£o de exemplos de perguntas
        with st.expander("üí° Exemplos de Perguntas"):
            st.markdown("""
            **An√°lise Descritiva:**
            - Quais s√£o os tipos de dados de cada coluna?
            - Mostre as estat√≠sticas descritivas dos dados
            - Quantos valores √∫nicos existem em cada coluna?
            
            **Visualiza√ß√µes:**
            - Crie um histograma da coluna [nome_da_coluna]
            - Mostre a correla√ß√£o entre as vari√°veis num√©ricas
            - Fa√ßa um gr√°fico de dispers√£o entre [coluna1] e [coluna2]
            
            **An√°lise de Padr√µes:**
            - Existem outliers nos dados?
            - Qual √© a distribui√ß√£o da vari√°vel target?
            - Quais s√£o os padr√µes mais interessantes nos dados?
            """)
    
    else:
        # Tela inicial quando nenhum arquivo foi carregado
        st.info("üëÜ Fa√ßa upload de um arquivo CSV na barra lateral para come√ßar a an√°lise!")
        
        # Informa√ß√µes sobre a aplica√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("üß† Intelig√™ncia Artificial")
            st.write("Utiliza LangChain e Groq para an√°lise inteligente de dados")
        
        with col2:
            st.subheader("üìä An√°lise Completa")
            st.write("Estat√≠sticas descritivas, visualiza√ß√µes e detec√ß√£o de padr√µes")
        
        with col3:
            st.subheader("üí¨ Interface Conversacional")
            st.write("Fa√ßa perguntas em linguagem natural sobre seus dados")

if __name__ == "__main__":
    main()
